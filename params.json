{"name":"Couchdb-dump","tagline":"Tools to dump, modify, and load documents in CouchDB from the command line. (Same basic concept as mysqldump, but much more and for CouchDB)","body":"couchdb-dump\r\n========\r\n\r\nA set of three command line tools that perform the following functions. \r\n* `cdbdump` outputs all documents (including any attachments) in a [CouchDB](http://couchdb.apache.org) database\r\n* `cdbmorph` lets you provide a function that can modify the documents in that output\r\n* `cdbload` takes that output as input and loads it back into a CouchDB database.\r\n\r\nReading and writing the data is done via stdin and stdout, respectively. The output of `cdbdump` is a JSON document containing a \"docs\" array element which contains the CouchDB database documents. The `cdbmorph` command takes the output of `cdbdump` and allows you to modify the documents in it by passing each of them through a function that you supply. The `cdbload` command takes an input which is exactly the same as the output of `cdbdump` or `cdbmorph` and writes every document in it into the target database.\r\n\r\n## Installation\r\n\r\n`npm install -g couchdb-dump`  \r\n[See also couchdb-dump on npm.](https://www.npmjs.com/package/couchdb-dump)\r\n\r\n## Usage Examples\r\n\r\nThe following will dump the contents of a CouchDB database called *myhugedatabase* running on port 5984 on localhost. The output is written to a file called *myhugedatabase.json*.\r\n\r\n`cdbdump -d myhugedatabase > myhugedatabase.json`\r\n\r\nIf you are doing this for archiving purposes you could do something like this to extract and gzip by piping output ...\r\n\r\n`cdbdump -d myhugedatabase | gzip > myhugedatabase.json.gz`\r\n\r\n[See the project README for more on the usage of the `cdbdump` command.] (https://github.com/raffi-minassian/couchdb-dump/blob/master/README.md#cdbdump-full-usage)\r\n\r\n***\r\n\r\nBoth of the following command examples will load all the documents in the *myhugedatabase.json* file into a CouchDB database called *myhugeduplicate*.\r\n\r\n`cdbload -d myhugeduplicate < myhugedatabase.json`<br>\r\n **OR**<br>\r\n`cat myhugedatabase.json | cdbload -d myhugeduplicate`\r\n\r\nYou can even do this ...\r\n\r\n`cdbdump -d myhugedatabase | cdbload -d myhugeduplicate`\r\n\r\n... which streams all the docs from one CouchDB database into a second one. While this works well, you should probably take a look at using [CouchDB's awesome built-in replication features](http://guide.couchdb.org/draft/replication.html) instead.\r\n\r\n[See the project README for more on the usage of the `cdbload` command.] (https://github.com/raffi-minassian/couchdb-dump/blob/master/README.md#cdbload-full-usage)\r\n\r\n***\r\n\r\nBut suppose you need to manipulate the documents in the `cdbdump` output before you load them into CouchDB with `cdbload`. You can do that with the included `cdbmorph` command.\r\n\r\nLets assume you need to add a new key and value to all documents which meet certain criteria, and you need to delete documents which meet some other criteria. So you [write a function](https://github.com/raffi-minassian/couchdb-dump/blob/master/README.md#functiondoc-callback) as follows and save it in a file called *morph.js*. For example:\r\n\r\n    module.exports = function(doc, cb){\r\n      if(doc.somekey && doc.somekey === 'somevalue'){\r\n        doc.anotherkey = 'anothervalue';\r\n      }\r\n      if(doc.someotherkey && doc.someotherkey === 'someothervalue'){\r\n        doc._deleted = true;\r\n      }\r\n      cb(null, doc);\r\n    }\r\n\r\nNow you can run the documents in the *myhugedatabase.json* file from the example above through this function and feed the output into a file or directly back into a CouchDB database as follows ...\r\n\r\n`cat myhugedatabase.json | cdbmorph -f ./morph.js | cdbload -d myhugemodified`\r\n\r\nYou can also pipe output directly from `cdbdump` to `cdbmorph` to `cdbload` like this ...\r\n\r\n`cdbdump -d myhugedatabase | cdbmorph -f ./morph.js | cdbload -d myhugemodified`\r\n\r\nYou can even put modified documents back into a CouchDB database by loading the stream of changed documents back into the source database, simulating the feel of in-place-updates, like this ...\r\n\r\n`cdbdump -k -d myhugedatabase | cdbmorph -f ./morph.js | cdbload -d myhugedatabase`\r\n\r\n[See the project README for more on the usage of the `cdbmorph` command.] (https://github.com/raffi-minassian/couchdb-dump/blob/master/README.md#cdbmorph-full-usage)\r\n\r\n***\r\n\r\n[Release History](https://github.com/raffi-minassian/couchdb-dump/blob/master/README.md#release-history)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}